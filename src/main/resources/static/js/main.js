import { MOCK_MODE, generateUUID, isValidUUID } from './utils/utils.js'; import { postChat, getChat, getAllChats, putChat, deleteChat, getChatHistory, getRandomMessageId } from './api/chatApi.js'; import { postQueue, getQueue, getAllQueues, putQueue, deleteQueue, getRandomQueueSessionId, getRandomQueueSessionIds } from './api/queueApi.js'; import { postSession, getSession, getAllSessions, putSession, deleteSession, getRandomSessionId } from './api/sessionApi.js'; import { connectWebSocket, disconnectWebSocket, sendWebSocketMessage } from './api/webSocket.js'; import { formatChatMessage, formatQueueUser, formatSession, updateInputFields } from './ui/ui.js';

function initializeSessionIds() { const sessionIdInputs = ['ws-session-id','chat-post-from','chat-post-to','chat-put-from','chat-put-to','chat-history-session1','chat-history-session2','queue-post-session','queue-get-session','queue-put-session','queue-delete-session','session-post-user1','session-post-user2','session-put-user1','session-put-user2','ws-chat-session','ws-chat-target','ws-queue-join-session','ws-queue-leave-session','ws-signal-session','ws-signal-target','ws-disconnect-session','ws-disconnect-target']; sessionIdInputs.forEach(id => { const input = document.getElementById(id); if (input) input.value = MOCK_MODE ? `mock-${id}-${Math.floor(Math.random() * 1000)}` : generateUUID(); }); }

window.onload = async () => { initializeSessionIds(); const chatMessageInputs = ['chat-get-id','chat-put-id','chat-delete-id']; for (const id of chatMessageInputs) { const input = document.getElementById(id); if (input) input.value = await getRandomMessageId(); } const queueSessionInputs = ['queue-get-session','queue-put-session','queue-delete-session']; for (const id of queueSessionInputs) { const input = document.getElementById(id); if (input) input.value = await getRandomQueueSessionId(); } const [userSessionId1, userSessionId2] = await getRandomQueueSessionIds(); document.getElementById('session-post-user1').value = userSessionId1; document.getElementById('session-post-user2').value = userSessionId2; document.getElementById('session-put-user1').value = userSessionId1; document.getElementById('session-put-user2').value = userSessionId2; const sessionInputs = ['session-get-id','session-put-id','session-delete-id']; for (const id of sessionInputs) { const input = document.getElementById(id); if (input) input.value = await getRandomSessionId(); } };

window.connectWebSocket = function() { const sessionId = document.getElementById('ws-session-id').value.trim(); const statusDiv = document.getElementById('ws-status'); const connectButton = document.getElementById('ws-connect-button'); connectWebSocket(sessionId, statusDiv, connectButton, async (sessionId) => { updateInputFields(['chat-post-from','ws-chat-session','ws-queue-join-session','ws-queue-leave-session','ws-signal-session','ws-disconnect-session'], sessionId); document.getElementById('chat-post-to').value = await getRandomQueueSessionId(sessionId); document.getElementById('ws-chat-target').value = await getRandomQueueSessionId(sessionId); document.getElementById('ws-signal-target').value = await getRandomQueueSessionId(sessionId); document.getElementById('ws-disconnect-target').value = await getRandomQueueSessionId(sessionId); }); };

window.disconnectWebSocket = function() { const statusDiv = document.getElementById('ws-status'); disconnectWebSocket(statusDiv); };

window.testEndpoint = async function() { const endpoint=arguments[0],responseDiv=document.getElementById(`${endpoint}-response`),button=document.querySelector(`button[onclick="testEndpoint('${endpoint}')"]`);responseDiv.textContent='Processing...';button.disabled=true;try{switch(endpoint){case'chat-post':const chatPost={fromSessionId:document.getElementById('chat-post-from').value.trim(),toSessionId:document.getElementById('chat-post-to').value.trim(),content:document.getElementById('chat-post-content').value.trim()};if(!isValidUUID(chatPost.fromSessionId)||!isValidUUID(chatPost.toSessionId)||!chatPost.content)throw new Error('Valid From Session ID, To Session ID, and Content required');const{data:chatPostData,updateIds:chatUpdateIds,newId:chatNewId}=await postChat(chatPost.fromSessionId,chatPost.toSessionId,chatPost.content);responseDiv.innerHTML=formatChatMessage(chatPostData);updateInputFields(chatUpdateIds,chatNewId);break;case'chat-get':const chatGetId=document.getElementById('chat-get-id').value.trim();if(!isValidUUID(chatGetId))throw new Error('Valid Message ID required');const chatGetData=await getChat(chatGetId);responseDiv.innerHTML=formatChatMessage(chatGetData);break;case'chat-get-all':const chatGetAllData=await getAllChats();responseDiv.innerHTML=chatGetAllData.map(formatChatMessage).join('');break;case'chat-put':const chatPut={id:document.getElementById('chat-put-id').value.trim(),fromSessionId:document.getElementById('chat-put-from').value.trim(),toSessionId:document.getElementById('chat-put-to').value.trim(),content:document.getElementById('chat-put-content').value.trim()};if(!isValidUUID(chatPut.id))throw new Error('Valid Message ID required');if(!isValidUUID(chatPut.fromSessionId)||!isValidUUID(chatPut.toSessionId)||!chatPut.content)throw new Error('Valid From Session ID, To Session ID, and Content required');const chatPutData=await putChat(chatPut.id,chatPut.fromSessionId,chatPut.toSessionId,chatPut.content);responseDiv.innerHTML=formatChatMessage(chatPutData);break;case'chat-delete':const chatDeleteId=document.getElementById('chat-delete-id').value.trim();if(!isValidUUID(chatDeleteId))throw new Error('Valid Message ID required');responseDiv.textContent=await deleteChat(chatDeleteId);document.getElementById('chat-delete-id').value=await getRandomMessageId();break;case'chat-history':const sessionId1=document.getElementById('chat-history-session1').value.trim(),sessionId2=document.getElementById('chat-history-session2').value.trim();if(!isValidUUID(sessionId1)||!isValidUUID(sessionId2))throw new Error('Valid Session IDs required');const chatHistoryData=await getChatHistory(sessionId1,sessionId2);responseDiv.innerHTML=chatHistoryData.map(formatChatMessage).join('');break;case'queue-post':const queuePostSessionId=document.getElementById('queue-post-session').value.trim();if(!isValidUUID(queuePostSessionId))throw new Error('Valid Session ID required');const{data:queuePostData,updateIds:queueUpdateIds,newId:queueNewId}=await postQueue(queuePostSessionId);responseDiv.innerHTML=formatQueueUser(queuePostData);updateInputFields(queueUpdateIds,queueNewId);break;case'queue-get':const queueGetSession=document.getElementById('queue-get-session').value.trim();if(!isValidUUID(queueGetSession))throw new Error('Valid Session ID required');const queueGetData=await getQueue(queueGetSession);responseDiv.innerHTML=formatQueueUser(queueGetData);break;case'queue-get-all':const queueGetAllData=await getAllQueues();responseDiv.innerHTML=queueGetAllData.map(formatQueueUser).join('');break;case'queue-put':const queuePut={sessionId:document.getElementById('queue-put-session').value.trim(),matched:document.getElementById('queue-put-matched').checked};if(!isValidUUID(queuePut.sessionId))throw new Error('Valid Session ID required');const queuePutData=await putQueue(queuePut.sessionId,queuePut.matched);responseDiv.innerHTML=formatQueueUser(queuePutData);break;case'queue-delete':const queueDeleteSession=document.getElementById('queue-delete-session').value.trim();if(!isValidUUID(queueDeleteSession))throw new Error('Valid Session ID required');responseDiv.textContent=await deleteQueue(queueDeleteSession);document.getElementById('queue-delete-session').value=await getRandomQueueSessionId();break;case'session-post':const sessionPost={userSessionId1:document.getElementById('session-post-user1').value.trim(),userSessionId2:document.getElementById('session-post-user2').value.trim()};if(!isValidUUID(sessionPost.userSessionId1)||!isValidUUID(sessionPost.userSessionId2))throw new Error('Valid User Session IDs required');const{data:sessionPostData,updateIds:sessionUpdateIds,newId:sessionNewId}=await postSession(sessionPost.userSessionId1,sessionPost.userSessionId2);responseDiv.innerHTML=formatSession(sessionPostData);updateInputFields(sessionUpdateIds,sessionNewId);break;case'session-get':const sessionGetId=document.getElementById('session-get-id').value.trim();if(!isValidUUID(sessionGetId))throw new Error('Valid Session ID required');const sessionGetData=await getSession(sessionGetId);responseDiv.innerHTML=formatSession(sessionGetData);break;case'session-get-all':const sessionGetAllData=await getAllSessions();responseDiv.innerHTML=sessionGetAllData.map(formatSession).join('');break;case'session-put':const sessionPut={id:document.getElementById('session-put-id').value.trim(),userSessionId1:document.getElementById('session-put-user1').value.trim(),userSessionId2:document.getElementById('session-put-user2').value.trim(),active:document.getElementById('session-put-active').checked};if(!isValidUUID(sessionPut.id))throw new Error('Valid Session ID required');if(!isValidUUID(sessionPut.userSessionId1)||!isValidUUID(sessionPut.userSessionId2))throw new Error('Valid User Session IDs required');const sessionPutData=await putSession(sessionPut.id,sessionPut.userSessionId1,sessionPut.userSessionId2,sessionPut.active);responseDiv.innerHTML=formatSession(sessionPutData);break;case'session-delete':const sessionDeleteId=document.getElementById('session-delete-id').value.trim();if(!isValidUUID(sessionDeleteId))throw new Error('Valid Session ID required');responseDiv.textContent=await deleteSession(sessionDeleteId);document.getElementById('session-delete-id').value=await getRandomSessionId();break;case'ws-chat':const wsChat={sessionId:document.getElementById('ws-chat-session').value.trim(),targetSessionId:document.getElementById('ws-chat-target').value.trim(),content:document.getElementById('ws-chat-content').value.trim()};if(!isValidUUID(wsChat.sessionId)||!isValidUUID(wsChat.targetSessionId)||!wsChat.content)throw new Error('Valid Session ID, Target Session ID, and Content required');sendWebSocketMessage('/app/session.message',wsChat,responseDiv);break;case'ws-queue-join':const wsQueueJoin={sessionId:document.getElementById('ws-queue-join-session').value.trim(),type:'JOIN'};if(!isValidUUID(wsQueueJoin.sessionId))throw new Error('Valid Session ID required');sendWebSocketMessage('/app/queue.join',wsQueueJoin,responseDiv);break;case'ws-queue-leave':const wsQueueLeave={sessionId:document.getElementById('ws-queue-leave-session').value.trim(),type:'LEAVE'};if(!isValidUUID(wsQueueLeave.sessionId))throw new Error('Valid Session ID required');sendWebSocketMessage('/app/queue.leave',wsQueueLeave,responseDiv);break;case'ws-signal':let sdp;try{sdp=JSON.parse(document.getElementById('ws-signal-sdp').value.trim()||'{}');}catch(e){throw new Error('Invalid SDP JSON')}const wsSignal={type:document.getElementById('ws-signal-type').value.trim(),sessionId:document.getElementById('ws-signal-session').value.trim(),targetSessionId:document.getElementById('ws-signal-target').value.trim(),sdp};if(!wsSignal.type||!isValidUUID(wsSignal.sessionId)||!isValidUUID(wsSignal.targetSessionId))throw new Error('Valid Type, Session ID, and Target Session ID required');sendWebSocketMessage('/app/session.signal',wsSignal,responseDiv);break;case'ws-disconnect':const wsDisconnect={sessionId:document.getElementById('ws-disconnect-session').value.trim(),targetSessionId:document.getElementById('ws-disconnect-target').value.trim(),type:'DISCONNECT'};if(!isValidUUID(wsDisconnect.sessionId)||!isValidUUID(wsDisconnect.targetSessionId))throw new Error('Valid Session ID and Target Session ID required');sendWebSocketMessage('/app/session.disconnect',wsDisconnect,responseDiv);break;default:throw new Error('Unknown endpoint');}}catch(error){responseDiv.textContent=`Error: ${error.message}`;console.error(`Error testing endpoint ${endpoint}:`,error);}finally{button.disabled=false;}};

