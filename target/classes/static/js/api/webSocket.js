import { WS_URL, MOCK_MODE, isValidUUID } from '../utils/utils.js';let stompClient=null;

function connectWebSocket(sessionId,statusDiv,connectButton,callback){if(!sessionId||!isValidUUID(sessionId)){statusDiv.textContent='Error: Valid Session ID required';return;}if(MOCK_MODE){statusDiv.textContent='Connected (Mock Mode)';statusDiv.classList.add('connected');statusDiv.classList.remove('disconnected');connectButton.disabled=false;callback(sessionId);return;}connectButton.disabled=true;statusDiv.textContent='Connecting...';try{const socket=new SockJS(WS_URL);stompClient=Stomp.over(socket);stompClient.connect({},async(frame)=>{statusDiv.textContent='Connected';statusDiv.classList.add('connected');statusDiv.classList.remove('disconnected');connectButton.disabled=false;callback(sessionId);stompClient.subscribe(`/topic/session/${sessionId}`,(message)=>{try{const msg=JSON.parse(message.body);const responseDivId=getResponseDivForMessage(msg);if(responseDivId){document.getElementById(responseDivId).textContent=JSON.stringify(msg,null,2);}}catch(error){console.error('Error parsing WebSocket message:',error);}});stompClient.subscribe(`/user/${sessionId}/queue/messages`,(message)=>{try{document.getElementById('ws-queue-join-response').textContent=JSON.stringify(JSON.parse(message.body),null,2);}catch(error){console.error('Error parsing queue message:',error);}});},(error)=>{statusDiv.textContent=`Error: Connection failed - ${error}`;statusDiv.classList.add('disconnected');statusDiv.classList.remove('connected');connectButton.disabled=false;console.error('WebSocket error:',error);});}catch(error){statusDiv.textContent=`Error: ${error.message}`;statusDiv.classList.add('disconnected');connectButton.disabled=false;console.error('WebSocket connection error:',error);}}

function disconnectWebSocket(statusDiv){if(stompClient&&!MOCK_MODE){try{stompClient.disconnect(()=>{stompClient=null;statusDiv.textContent='Disconnected';statusDiv.classList.add('disconnected');statusDiv.classList.remove('connected');});}catch(error){statusDiv.textContent=`Error: ${error.message}`;console.error('WebSocket disconnection error:',error);}}else{statusDiv.textContent=MOCK_MODE?'Disconnected (Mock Mode)':'No active connection';statusDiv.classList.add('disconnected');statusDiv.classList.remove('connected');}}

function sendWebSocketMessage(destination,message,responseDiv){if(MOCK_MODE){responseDiv.textContent=JSON.stringify(message,null,2);return;}if(!stompClient)throw new Error('WebSocket not connected');stompClient.send(destination,{},JSON.stringify(message));responseDiv.textContent=`${destination.split('/').pop()} sent, awaiting response...`; }

function getResponseDivForMessage(message){if(message.content)return'ws-chat-response';if(message.type==='JOIN')return'ws-queue-join-response';if(message.type==='LEAVE')return'ws-queue-leave-response';if(message.type==='OFFER'||message.type==='ANSWER'||message.type==='ICE')return'ws-signal-response';if(message.type==='DISCONNECT')return'ws-disconnect-response';return null;}

export { connectWebSocket, disconnectWebSocket, sendWebSocketMessage };
